/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package ca.mcgill.ecse.flexibook.application;

import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.sql.Time;
import java.sql.Date;
import java.util.Calendar;
import java.util.List;

import ca.mcgill.ecse.flexibook.model.Appointment;
import ca.mcgill.ecse.flexibook.model.Customer;
import ca.mcgill.ecse.flexibook.model.FlexiBook;
import ca.mcgill.ecse.flexibook.model.Owner;
import ca.mcgill.ecse.flexibook.model.User;
import ca.mcgill.ecse.flexibook.persisitence.FlexiBookPersistence;
import ca.mcgill.ecse.flexibook.view.FlexibookPage;

public class FlexiBookApplication {

	//static class variable
	private static FlexiBook flexiBook;
	private static User currentUser;
	private static Date currentDate;
	private static Time currentTime;
	private static boolean testMode;
	private static List<Appointment> pendingAppointments;

	public String getGreeting() {
		return "Hello world.";
	}

	public static void main(String[] args) {
		// start UI
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				new FlexibookPage().setVisible(true);
			}
		});

		setSystemTimeAndDate("2020-01-12+14:00");
		System.out.println(monthOfDate(currentDate));
		System.out.println(dayValueOfDate(currentDate));

	}


	public static FlexiBook getFlexibook() {
		if(flexiBook == null) {
			//load model
			flexiBook = FlexiBookPersistence.loadFlexiBook();
		}
		return flexiBook;
	}

	public static User getCurrentUser() {
		return currentUser;
	}

	public static void setCurrentUser(User user) {
		currentUser = user;
	}

	@SuppressWarnings("deprecation")
	public static void setSystemTimeAndDate(String input) {
		testMode = true;
		//		2020-10-01+14:00
		String format = "";
		String timeFormat = "";
		for(int i = 0; i < input.length(); i++) {
			if(!(input.charAt(i) == '+')) {
				format += input.charAt(i);
			}else {
				format += " ";
			}
		}

		timeFormat = input.substring(11);

		String pattern = "yyyy-MM-dd HH:mm";
		String pattern2 = "HH:mm";
		SimpleDateFormat simpleDateFormat = new SimpleDateFormat(pattern);
		SimpleDateFormat simpleDateFormat2= new SimpleDateFormat(pattern2);
		try {
			currentDate = new Date(simpleDateFormat.parse(format).getTime());
			currentTime = new Time(simpleDateFormat2.parse(timeFormat).getTime());

		} catch (ParseException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	public static Date getDate() {
		return currentDate;
	}

	/**
	 * method to convert string into java.sql.time
	 */
	public static Time convertTotime(String input) {
		DateFormat formatter = new SimpleDateFormat("HH:mm");
		Time timeValue = null;
		try {
			timeValue = new Time(formatter.parse(input).getTime());
		} catch (ParseException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return timeValue;
	}

	/**@return Date
	 * method to convert string into java.sql.date
	 */
	public static Date convertToDate(String input) {
		DateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");
		Date dateValue = null;
		try {
			dateValue = new java.sql.Date(formatter.parse(input).getTime());
		} catch (ParseException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return dateValue;
	}

	public static boolean convertToBoolean(String input) {
		if (input.equals("false")) {
			return false;
		}
		return true;
	}
	public static void setPendingAppointments(List<Appointment> pendingAppointments) {
		pendingAppointments.addAll(pendingAppointments);
	}

	public static List<Appointment> getPendingAppointments(){
		return pendingAppointments;
	}

	//returns the currenttime 
	public static Time getCurrentTime() {
		if(testMode) {
			return currentTime;
		}
		LocalTime time = LocalTime.now();
		DateTimeFormatter formatter = DateTimeFormatter.ofPattern("HH:mm");
		String myTime = time.format(formatter);
		return convertTotime(myTime);
	}

	public static Date addSevenDays(Date date) {
		Calendar c = Calendar.getInstance();
		c.setTime(currentDate);
		c.add(Calendar.DAY_OF_MONTH, 7);
		java.util.Date tempCleanedDate = c.getTime();
		java.sql.Date cleanedDate = new java.sql.Date(tempCleanedDate.getTime());
		return cleanedDate;
	}

	public static int dayValueOfDate(Date date) {
		Calendar c = Calendar.getInstance();
		c.setTime(date);
		return c.get(Calendar.DAY_OF_MONTH);
	}

	public static int monthOfDate(Date date) {
		Calendar c = Calendar.getInstance();
		c.setTime(date);
		return c.get(Calendar.MONTH);
	}
	
	public static Time addDurationToTime(Time time, int duration) {
		Calendar cal = Calendar.getInstance();
		cal.setTime(time);
		cal.add(Calendar.MINUTE, duration);
		java.util.Date tempCleanedDate = cal.getTime();
		Time time2 = new Time (tempCleanedDate.getTime());
		return time2;
	}
	
	public static String getCurrentUserName() {
		if (currentUser != null ) {
			return currentUser.getUsername();
			}
		else {
		return null;
	}
}
}
